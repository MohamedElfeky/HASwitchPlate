##############################################################################
# Automations for handling sliders on page 4

input_select:
  hasp_plate01_p4_b4_font:
    name: plate01 p[4].b[4] Font
    icon: mdi:format-font
    options:
      - 0 Consolas 24
      - 1 Consolas 32
      - 2 Consolas 48
      - 3 Consolas Bold 80
      - 4 Webdings 56
      - 5 Noto Sans 24
      - 6 Noto Sans 32
      - 7 Noto Sans 48
      - 8 Noto Sans 64
      - 9 Noto Sans 80
      - 10 Noto Sans Bold 80
  hasp_plate01_p4_b5_font:
    name: plate01 p[4].b[5] Font
    icon: mdi:format-font
    options:
      - 0 Consolas 24
      - 1 Consolas 32
      - 2 Consolas 48
      - 3 Consolas Bold 80
      - 4 Webdings 56
      - 5 Noto Sans 24
      - 6 Noto Sans 32
      - 7 Noto Sans 48
      - 8 Noto Sans 64
      - 9 Noto Sans 80
      - 10 Noto Sans Bold 80
  hasp_plate01_p4_b6_font:
    name: plate01 p[4].b[6] Font
    icon: mdi:format-font
    options:
      - 0 Consolas 24
      - 1 Consolas 32
      - 2 Consolas 48
      - 3 Consolas Bold 80
      - 4 Webdings 56
      - 5 Noto Sans 24
      - 6 Noto Sans 32
      - 7 Noto Sans 48
      - 8 Noto Sans 64
      - 9 Noto Sans 80
      - 10 Noto Sans Bold 80

  # These will be populated at startup with a list of available light entities
  hasp_plate01_p4_b4_light:
    name: plate01 p[4].b[4] Light
    options:
      - No lights defined
  hasp_plate01_p4_b5_light:
    name: plate01 p[4].b[5] Light
    options:
      - No lights defined
  hasp_plate01_p4_b6_light:
    name: plate01 p[4].b[6] Light
    options:
      - No lights defined

input_text:
  # Text to be displayed above each slider
  hasp_plate01_p4_b4_text:
    name: plate01 p[4].b[4] Text
  hasp_plate01_p4_b5_text:
    name: plate01 p[4].b[5] Text
  hasp_plate01_p4_b6_text:
    name: plate01 p[4].b[6] Text
  # Saved name of the light selected by the user, to be saved and then restored at Hass start time
  hasp_plate01_p4_b4_light_saved:
  hasp_plate01_p4_b5_light_saved:
  hasp_plate01_p4_b6_light_saved:

input_boolean:
  # Track on/off state of the user selected light
  hasp_plate01_p4_b4_light_state:
  hasp_plate01_p4_b5_light_state:
  hasp_plate01_p4_b6_light_state:

##############################################################################
automation:
  # populate inputs at startup or when called
  - alias: hasp_plate01_p4_light_populate
    trigger:
      - platform: homeassistant
        event: start
    action:
      # turn off the automations which save the currently-selected light while we populate the list
      - service: homeassistant.turn_off
        entity_id:
          - automation.hasp_plate01_p4_b4_light_selected
          - automation.hasp_plate01_p4_b5_light_selected
          - automation.hasp_plate01_p4_b6_light_selected
      # populate the list of lights but skip the foreground/background color lights we created for theme support
      - service: input_select.set_options
        data_template:
          entity_id: input_select.hasp_plate01_p4_b4_light
          options: >-
            {%- set lights = namespace(light=[]) -%}
            {%- for light in states.light | map(attribute='entity_id') | list -%}
              {%- if light | regex_search("light.hasp_.*selected_.*ground_color") -%}
              {%- else -%}
                {%- set lights.light = lights.light + [light] -%}
              {%- endif -%}
            {%- endfor -%}
            {{lights.light}}
      - service: input_select.set_options
        data_template:
          entity_id: input_select.hasp_plate01_p4_b5_light
          options: >-
            {%- set lights = namespace(light=[]) -%}
            {%- for light in states.light | map(attribute='entity_id') | list -%}
              {%- if light | regex_search("light.hasp_.*selected_.*ground_color") -%}
              {%- else -%}
                {%- set lights.light = lights.light + [light] -%}
              {%- endif -%}
            {%- endfor -%}
            {{lights.light}}
      - service: input_select.set_options
        data_template:
          entity_id: input_select.hasp_plate01_p4_b6_light
          options: >-
            {%- set lights = namespace(light=[]) -%}
            {%- for light in states.light | map(attribute='entity_id') | list -%}
              {%- if light | regex_search("light.hasp_.*selected_.*ground_color") -%}
              {%- else -%}
                {%- set lights.light = lights.light + [light] -%}
              {%- endif -%}
            {%- endfor -%}
            {{lights.light}}
      # with the list populated, select the light we had previously saved
      - service: input_select.select_option
        data_template:
          entity_id: input_select.hasp_plate01_p4_b4_light
          option: "{{ states('input_text.hasp_plate01_p4_b4_light_saved') }}"
      - service: input_select.select_option
        data_template:
          entity_id: input_select.hasp_plate01_p4_b5_light
          option: "{{ states('input_text.hasp_plate01_p4_b5_light_saved') }}"
      - service: input_select.select_option
        data_template:
          entity_id: input_select.hasp_plate01_p4_b6_light
          option: "{{ states('input_text.hasp_plate01_p4_b6_light_saved') }}"
      # finally, re-enable the automations which save the selected light
      - service: homeassistant.turn_on
        entity_id:
          - automation.hasp_plate01_p4_b4_light_selected
          - automation.hasp_plate01_p4_b5_light_selected
          - automation.hasp_plate01_p4_b6_light_selected

##############################################################################
# Automations to configure slider controls on page 4 as light dimmers

  ##############################################################################
  # button p[4].b[4] and slider p[4].b[7] automations
  #
  # Apply text labels and font to dimmer button, and set input_boolean to match state of selected light
  - alias: hasp_plate01_p4_b4_light_label
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: "binary_sensor.plate01_connected"
        to: "on"
      - platform: homeassistant
        event: start
      - platform: state
        entity_id: input_text.hasp_plate01_p4_b4_text
      - platform: state
        entity_id: input_select.hasp_plate01_p4_b4_font
    condition:
      - condition: state
        entity_id: "binary_sensor.plate01_connected"
        state: "on"
    action:
      - service: mqtt.publish
        data:
          topic: "hasp/plate01/command/json"
          payload_template: >-
            ["p[4].b[4].font={{states('input_select.hasp_plate01_p4_b4_font').split(" ")[0]|int}}","p[4].b[4].txt=\"{{states('input_text.hasp_plate01_p4_b4_text')}}\""]
      - service_template: input_boolean.turn_{%set light=states("input_select.hasp_plate01_p4_b4_light")%}{%- if states(light) == "on" -%}on{%- else -%}off{%- endif -%}
        data:
          entity_id: input_boolean.hasp_plate01_p4_b4_light_state
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b4_iconoverlay

  # Save selected light to input_text for safe keeping
  - alias: hasp_plate01_p4_b4_light_selected
    trigger:
      - platform: state
        entity_id: input_select.hasp_plate01_p4_b4_light
    action:
      - service: input_text.set_value
        data_template:
          entity_id: input_text.hasp_plate01_p4_b4_light_saved
          value: "{{ states('input_select.hasp_plate01_p4_b4_light') }}"
      - service_template: input_boolean.turn_{%set light=states("input_select.hasp_plate01_p4_b4_light")%}{%- if states(light) == "on" -%}on{%- else -%}off{%- endif -%}
        data:
          entity_id: input_boolean.hasp_plate01_p4_b4_light_state
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b7_update_hasp
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b4_iconoverlay

  # Toggle the light on/off when user presses the button on HASP
  - alias: hasp_plate01_p4_b4_light_toggle
    trigger:
      - platform: mqtt
        topic: "hasp/plate01/state/p[4].b[4]"
        payload: "OFF"
    action:
      - service: homeassistant.toggle
        data_template:
          entity_id: '{{states("input_text.hasp_plate01_p4_b4_light_saved")}}'
      - condition: template
        value_template: '{%set light=states("input_select.hasp_plate01_p4_b4_light")%}{{ states(light) != states("input_boolean.hasp_plate01_p4_b4_light_state") }}'
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b4_iconoverlay

  # Set dimmer value on the light when user moves the slider on HASP
  - alias: hasp_plate01_p4_b7_update_hass
    trigger:
      - platform: mqtt
        topic: "hasp/plate01/state/p[4].b[7].val"
    action:
      - service: light.turn_on
        data_template:
          entity_id: '{{states("input_text.hasp_plate01_p4_b4_light_saved")}}'
          brightness: "{{ trigger.payload }}"

  # Set the slider position on the HASP. Triggered at hass/device startup, and then called directly by other automations as needed
  - alias: hasp_plate01_p4_b7_update_hasp
    trigger:
      - platform: state
        entity_id: "binary_sensor.plate01_connected"
        to: "on"
      - platform: homeassistant
        event: start
    condition:
      - condition: state
        entity_id: "binary_sensor.plate01_connected"
        state: "on"
    action:
      - service: mqtt.publish
        data_template:
          topic: "hasp/plate01/command/p[4].b[7].val"
          payload_template: '{%set target=states("input_text.hasp_plate01_p4_b4_light_saved")%}{{state_attr(target,"brightness")|default(0)|int}}'

  # Catch events from the selected light device and manually trigger automations to respond
  - alias: hasp_plate01_p4_b7_catch_update
    trigger:
      - platform: event
        event_type: state_changed
    condition:
      - condition: template
        value_template: >
          {%set target=states("input_select.hasp_plate01_p4_b4_light")%}{{trigger.event.data.entity_id == target}}
      - condition: state
        entity_id: "binary_sensor.plate01_connected"
        state: "on"
    action:
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b7_update_hasp
      - condition: template
        value_template: '{%set light=states("input_select.hasp_plate01_p4_b4_light")%}{{ states(light) != states("input_boolean.hasp_plate01_p4_b4_light_state") }}'
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b4_iconoverlay

  # Overlay a light icon on the left side of p[4].b[4]
  - alias: hasp_plate01_p4_b4_iconoverlay
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: "binary_sensor.plate01_connected"
        to: "on"
      - platform: homeassistant
        event: start
      - platform: mqtt
        topic: "hasp/plate01/command/page"
        payload: "4"
      - platform: mqtt
        topic: "hasp/plate01/command/p[4].b[4].txt"
      - platform: state
        entity_id: input_number.hasp_plate01_selectedbackgroundcolor
      - platform: state
        entity_id: input_number.hasp_plate01_unselectedbackgroundcolor
      - platform: state
        entity_id: input_number.hasp_plate01_selectedforegroundcolor
      - platform: state
        entity_id: input_number.hasp_plate01_unselectedforegroundcolor
    condition:
      - condition: state
        entity_id: "binary_sensor.plate01_connected"
        state: "on"
      - condition: template
        value_template: "{{ (states('input_number.hasp_plate01_activepage')|int) == 4 }}"
    action:
      - service: mqtt.publish
        data:
          topic: "hasp/plate01/command/json"
          payload_template: >-
            {%set light=states("input_select.hasp_plate01_p4_b4_light")%}
            ["ref 4","delay=1","xstr 0,28,58,50,8,
            {%- if states(light) == "on" -%}
              {{ states('input_number.hasp_plate01_unselectedforegroundcolor')|int }},{{ states('input_number.hasp_plate01_unselectedbackgroundcolor')|int }},1,1,3,\"\""
            {%- else -%}
              {{ states('input_number.hasp_plate01_selectedforegroundcolor')|int }},{{ states('input_number.hasp_plate01_selectedbackgroundcolor')|int }},1,1,3,\"\""
            {%- endif -%}
            ,"delay=1","ref 7"]
      - service_template: input_boolean.turn_{%set light=states("input_select.hasp_plate01_p4_b4_light")%}{%- if states(light) == "on" -%}on{%- else -%}off{%- endif -%}
        data:
          entity_id: input_boolean.hasp_plate01_p4_b4_light_state

  ##############################################################################
  # button p[4].b[5] and slider p[4].b[8] automations
  #
  # Apply text labels and font to dimmer button, and set input_boolean to match state of selected light
  - alias: hasp_plate01_p4_b5_light_label
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: "binary_sensor.plate01_connected"
        to: "on"
      - platform: homeassistant
        event: start
      - platform: state
        entity_id: input_text.hasp_plate01_p4_b5_text
      - platform: state
        entity_id: input_select.hasp_plate01_p4_b5_font
    condition:
      - condition: state
        entity_id: "binary_sensor.plate01_connected"
        state: "on"
    action:
      - service: mqtt.publish
        data:
          topic: "hasp/plate01/command/json"
          payload_template: >-
            ["p[4].b[5].font={{states('input_select.hasp_plate01_p4_b5_font').split(" ")[0]|int}}","p[4].b[5].txt=\"{{states('input_text.hasp_plate01_p4_b5_text')}}\""]
      - service_template: input_boolean.turn_{%set light=states("input_select.hasp_plate01_p4_b5_light")%}{%- if states(light) == "on" -%}on{%- else -%}off{%- endif -%}
        data:
          entity_id: input_boolean.hasp_plate01_p4_b5_light_state
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b5_iconoverlay

  # Save selected light to input_text for safe keeping
  - alias: hasp_plate01_p4_b5_light_selected
    trigger:
      - platform: state
        entity_id: input_select.hasp_plate01_p4_b5_light
    action:
      - service: input_text.set_value
        data_template:
          entity_id: input_text.hasp_plate01_p4_b5_light_saved
          value: "{{ states('input_select.hasp_plate01_p4_b5_light') }}"
      - service_template: input_boolean.turn_{%set light=states("input_select.hasp_plate01_p4_b5_light")%}{%- if states(light) == "on" -%}on{%- else -%}off{%- endif -%}
        data:
          entity_id: input_boolean.hasp_plate01_p4_b5_light_state
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b8_update_hasp
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b5_iconoverlay

  # Toggle the light on/off when user presses the button on HASP
  - alias: hasp_plate01_p4_b5_light_toggle
    trigger:
      - platform: mqtt
        topic: "hasp/plate01/state/p[4].b[5]"
        payload: "OFF"
    action:
      - service: homeassistant.toggle
        data_template:
          entity_id: '{{states("input_text.hasp_plate01_p4_b5_light_saved")}}'
      - condition: template
        value_template: '{%set light=states("input_select.hasp_plate01_p4_b5_light")%}{{ states(light) != states("input_boolean.hasp_plate01_p4_b5_light_state") }}'
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b5_iconoverlay

  # Set dimmer value on the light when user moves the slider on HASP
  - alias: hasp_plate01_p4_b8_update_hass
    trigger:
      - platform: mqtt
        topic: "hasp/plate01/state/p[4].b[8].val"
    action:
      - service: light.turn_on
        data_template:
          entity_id: '{{states("input_text.hasp_plate01_p4_b5_light_saved")}}'
          brightness: "{{ trigger.payload }}"

  # Set the slider position on the HASP. Triggered at hass/device startup, and then called directly by other automations as needed
  - alias: hasp_plate01_p4_b8_update_hasp
    trigger:
      - platform: state
        entity_id: "binary_sensor.plate01_connected"
        to: "on"
      - platform: homeassistant
        event: start
    condition:
      - condition: state
        entity_id: "binary_sensor.plate01_connected"
        state: "on"
    action:
      - service: mqtt.publish
        data_template:
          topic: "hasp/plate01/command/p[4].b[8].val"
          payload_template: '{%set target=states("input_text.hasp_plate01_p4_b5_light_saved")%}{{state_attr(target,"brightness")|default(0)|int}}'

  # Catch events from the selected light device and manually trigger automations to respond
  - alias: hasp_plate01_p4_b8_catch_update
    trigger:
      - platform: event
        event_type: state_changed
    condition:
      - condition: template
        value_template: >
          {%set target=states("input_select.hasp_plate01_p4_b5_light")%}{{trigger.event.data.entity_id == target}}
      - condition: state
        entity_id: "binary_sensor.plate01_connected"
        state: "on"
    action:
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b8_update_hasp
      - condition: template
        value_template: '{%set light=states("input_select.hasp_plate01_p4_b5_light")%}{{ states(light) != states("input_boolean.hasp_plate01_p4_b5_light_state") }}'
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b5_iconoverlay

  # Overlay a light icon on the left side of p[4].b[5]
  - alias: hasp_plate01_p4_b5_iconoverlay
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: "binary_sensor.plate01_connected"
        to: "on"
      - platform: homeassistant
        event: start
      - platform: mqtt
        topic: "hasp/plate01/command/page"
        payload: "4"
      - platform: mqtt
        topic: "hasp/plate01/command/p[4].b[5].txt"
      - platform: state
        entity_id: input_number.hasp_plate01_selectedbackgroundcolor
      - platform: state
        entity_id: input_number.hasp_plate01_unselectedbackgroundcolor
      - platform: state
        entity_id: input_number.hasp_plate01_selectedforegroundcolor
      - platform: state
        entity_id: input_number.hasp_plate01_unselectedforegroundcolor
    condition:
      - condition: state
        entity_id: "binary_sensor.plate01_connected"
        state: "on"
      - condition: template
        value_template: "{{ (states('input_number.hasp_plate01_activepage')|int) == 4 }}"
    action:
      - service: mqtt.publish
        data:
          topic: "hasp/plate01/command/json"
          payload_template: >-
            {%set light=states("input_select.hasp_plate01_p4_b5_light")%}
            ["ref 5","delay=1","xstr 0,120,58,50,8,
            {%- if states(light) == "on" -%}
              {{ states('input_number.hasp_plate01_unselectedforegroundcolor')|int }},{{ states('input_number.hasp_plate01_unselectedbackgroundcolor')|int }},1,1,3,\"\""
            {%- else -%}
              {{ states('input_number.hasp_plate01_selectedforegroundcolor')|int }},{{ states('input_number.hasp_plate01_selectedbackgroundcolor')|int }},1,1,3,\"\""
            {%- endif -%}
            ,"delay=1","ref 8"]
      - service_template: input_boolean.turn_{%set light=states("input_select.hasp_plate01_p4_b5_light")%}{%- if states(light) == "on" -%}on{%- else -%}off{%- endif -%}
        data:
          entity_id: input_boolean.hasp_plate01_p4_b5_light_state

  ##############################################################################
  # button p[4].b[6] and slider p[4].b[9] automations
  #
  # Apply text labels and font to dimmer button, and set input_boolean to match state of selected light
  - alias: hasp_plate01_p4_b6_light_label
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: "binary_sensor.plate01_connected"
        to: "on"
      - platform: homeassistant
        event: start
      - platform: state
        entity_id: input_text.hasp_plate01_p4_b6_text
      - platform: state
        entity_id: input_select.hasp_plate01_p4_b6_font
    condition:
      - condition: state
        entity_id: "binary_sensor.plate01_connected"
        state: "on"
    action:
      - service: mqtt.publish
        data:
          topic: "hasp/plate01/command/json"
          payload_template: >-
            ["p[4].b[6].font={{states('input_select.hasp_plate01_p4_b6_font').split(" ")[0]|int}}","p[4].b[6].txt=\"{{states('input_text.hasp_plate01_p4_b6_text')}}\""]
      - service_template: input_boolean.turn_{%set light=states("input_select.hasp_plate01_p4_b6_light")%}{%- if states(light) == "on" -%}on{%- else -%}off{%- endif -%}
        data:
          entity_id: input_boolean.hasp_plate01_p4_b6_light_state
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b6_iconoverlay

  # Save selected light to input_text for safe keeping
  - alias: hasp_plate01_p4_b6_light_selected
    trigger:
      - platform: state
        entity_id: input_select.hasp_plate01_p4_b6_light
    action:
      - service: input_text.set_value
        data_template:
          entity_id: input_text.hasp_plate01_p4_b6_light_saved
          value: "{{ states('input_select.hasp_plate01_p4_b6_light') }}"
      - service_template: input_boolean.turn_{%set light=states("input_select.hasp_plate01_p4_b6_light")%}{%- if states(light) == "on" -%}on{%- else -%}off{%- endif -%}
        data:
          entity_id: input_boolean.hasp_plate01_p4_b6_light_state
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b9_update_hasp
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b6_iconoverlay

  # Toggle the light on/off when user presses the button on HASP
  - alias: hasp_plate01_p4_b6_light_toggle
    trigger:
      - platform: mqtt
        topic: "hasp/plate01/state/p[4].b[6]"
        payload: "OFF"
    action:
      - service: homeassistant.toggle
        data_template:
          entity_id: '{{states("input_text.hasp_plate01_p4_b6_light_saved")}}'
      - condition: template
        value_template: '{%set light=states("input_select.hasp_plate01_p4_b6_light")%}{{ states(light) != states("input_boolean.hasp_plate01_p4_b6_light_state") }}'
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b6_iconoverlay

  # Set dimmer value on the light when user moves the slider on HASP
  - alias: hasp_plate01_p4_b9_update_hass
    trigger:
      - platform: mqtt
        topic: "hasp/plate01/state/p[4].b[9].val"
    action:
      - service: light.turn_on
        data_template:
          entity_id: '{{states("input_text.hasp_plate01_p4_b6_light_saved")}}'
          brightness: "{{ trigger.payload }}"

  # Set the slider position on the HASP. Triggered at hass/device startup, and then called directly by other automations as needed
  - alias: hasp_plate01_p4_b9_update_hasp
    trigger:
      - platform: state
        entity_id: "binary_sensor.plate01_connected"
        to: "on"
      - platform: homeassistant
        event: start
    condition:
      - condition: state
        entity_id: "binary_sensor.plate01_connected"
        state: "on"
    action:
      - service: mqtt.publish
        data_template:
          topic: "hasp/plate01/command/p[4].b[9].val"
          payload_template: '{%set target=states("input_text.hasp_plate01_p4_b6_light_saved")%}{{state_attr(target,"brightness")|default(0)|int}}'

  # Catch events from the selected light device and manually trigger automations to respond
  - alias: hasp_plate01_p4_b9_catch_update
    trigger:
      - platform: event
        event_type: state_changed
    condition:
      - condition: template
        value_template: >
          {%set target=states("input_select.hasp_plate01_p4_b6_light")%}{{trigger.event.data.entity_id == target}}
      - condition: state
        entity_id: "binary_sensor.plate01_connected"
        state: "on"
    action:
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b9_update_hasp
      - condition: template
        value_template: '{%set light=states("input_select.hasp_plate01_p4_b6_light")%}{{ states(light) != states("input_boolean.hasp_plate01_p4_b6_light_state") }}'
      - service: automation.trigger
        entity_id: automation.hasp_plate01_p4_b6_iconoverlay

  # Overlay a light icon on the left side of p[4].b[6]
  - alias: hasp_plate01_p4_b6_iconoverlay
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: "binary_sensor.plate01_connected"
        to: "on"
      - platform: homeassistant
        event: start
      - platform: mqtt
        topic: "hasp/plate01/command/page"
        payload: "4"
      - platform: mqtt
        topic: "hasp/plate01/command/p[4].b[6].txt"
      - platform: state
        entity_id: input_number.hasp_plate01_selectedbackgroundcolor
      - platform: state
        entity_id: input_number.hasp_plate01_unselectedbackgroundcolor
      - platform: state
        entity_id: input_number.hasp_plate01_selectedforegroundcolor
      - platform: state
        entity_id: input_number.hasp_plate01_unselectedforegroundcolor
    condition:
      - condition: state
        entity_id: "binary_sensor.plate01_connected"
        state: "on"
      - condition: template
        value_template: "{{ (states('input_number.hasp_plate01_activepage')|int) == 4 }}"
    action:
      - service: mqtt.publish
        data:
          topic: "hasp/plate01/command/json"
          payload_template: >-
            {%set light=states("input_select.hasp_plate01_p4_b6_light")%}
            ["ref 6","delay=1","xstr 0,209,58,50,8,
            {%- if states(light) == "on" -%}
              {{ states('input_number.hasp_plate01_unselectedforegroundcolor')|int }},{{ states('input_number.hasp_plate01_unselectedbackgroundcolor')|int }},1,1,3,\"\""
            {%- else -%}
              {{ states('input_number.hasp_plate01_selectedforegroundcolor')|int }},{{ states('input_number.hasp_plate01_selectedbackgroundcolor')|int }},1,1,3,\"\""
            {%- endif -%}
            ,"delay=1","ref 9"]
      - service_template: input_boolean.turn_{%set light=states("input_select.hasp_plate01_p4_b6_light")%}{%- if states(light) == "on" -%}on{%- else -%}off{%- endif -%}
        data:
          entity_id: input_boolean.hasp_plate01_p4_b6_light_state

  ##############################################################################
  # Automations to set colors on HASP Page 4
  #
  # Here we've swapped selected/unselected as these buttons will always be
  # unselected (unless actively being pressed), and sliders do not have a
  # selected/unselected state.
  - alias: hasp_plate01_p4_ColorConfig_selectedforegroundcolor
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: "binary_sensor.plate01_connected"
        to: "on"
      - platform: homeassistant
        event: start
      - platform: state
        entity_id: input_number.hasp_plate01_selectedforegroundcolor
    condition:
      - condition: state
        entity_id: "binary_sensor.plate01_connected"
        state: "on"
    action:
      - service: mqtt.publish
        data:
          topic: "hasp/plate01/command/json"
          payload_template: >-
            [{%- for i in range(4,7) -%}"p[4].b[{{i}}].pco={{ states('input_number.hasp_plate01_selectedforegroundcolor')|int }}"{% if not loop.last %},{% endif %}{%- endfor -%}]

  - alias: hasp_plate01_p4_ColorConfig_selectedbackgroundcolor
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: "binary_sensor.plate01_connected"
        to: "on"
      - platform: homeassistant
        event: start
      - platform: state
        entity_id: input_number.hasp_plate01_selectedbackgroundcolor
    condition:
      - condition: state
        entity_id: "binary_sensor.plate01_connected"
        state: "on"
    action:
      - service: mqtt.publish
        data:
          topic: "hasp/plate01/command/json"
          payload_template: >-
            [{%- for i in range(4,7) -%}"p[4].b[{{i}}].bco={{ states('input_number.hasp_plate01_selectedbackgroundcolor')|int }}"{% if not loop.last %},{% endif %}{%- endfor -%}]

  - alias: hasp_plate01_p4_ColorConfig_unselectedforegroundcolor
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: "binary_sensor.plate01_connected"
        to: "on"
      - platform: homeassistant
        event: start
      - platform: state
        entity_id: input_number.hasp_plate01_unselectedforegroundcolor
    condition:
      - condition: state
        entity_id: "binary_sensor.plate01_connected"
        state: "on"
    action:
      - service: mqtt.publish
        data:
          topic: "hasp/plate01/command/json"
          payload_template: >-
            [{%- for i in range(4,7) -%}"p[4].b[{{i}}].pco2={{ states('input_number.hasp_plate01_selectedforegroundcolor')|int }}",{%- endfor -%}
            {%- for i in range(7,10) -%}"p[4].b[{{i}}].pco={{ states('input_number.hasp_plate01_unselectedforegroundcolor')|int }}"{% if not loop.last %},{% endif %}{%- endfor -%}]

  - alias: hasp_plate01_p4_ColorConfig_unselectedbackgroundcolor
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: "binary_sensor.plate01_connected"
        to: "on"
      - platform: homeassistant
        event: start
      - platform: state
        entity_id: input_number.hasp_plate01_unselectedbackgroundcolor
    condition:
      - condition: state
        entity_id: "binary_sensor.plate01_connected"
        state: "on"
    action:
      - service: mqtt.publish
        data:
          topic: "hasp/plate01/command/json"
          payload_template: >-
            [{%- for i in range(4,7) -%}"p[4].b[{{i}}].bco2={{ states('input_number.hasp_plate01_selectedbackgroundcolor')|int }}",{%- endfor -%}
            {%- for i in range(7,10) -%}"p[4].b[{{i}}].bco={{ states('input_number.hasp_plate01_unselectedbackgroundcolor')|int }}"{% if not loop.last %},{% endif %}{%- endfor -%}]
