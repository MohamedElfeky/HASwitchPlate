blueprint:
  name: "plate01 p[x].b[y] displays the current temperature with icon and colors"
  description: "A HASP button displays the current temperature on the right with a dynamic thermometer icon on the left and (optional) colors"
  source_url: "https://github.com/aderusha/HASwitchPlate/blob/dev/Home_Assistant/blueprints/automation/hasp_Display_Temperature_with_Icon_and_Colors.yaml"
  domain: automation
  input:
    haspconnected:
      name: "HASP Device"
      description: "Select the HASP device"
      selector:
        entity:
          integration: mqtt
          domain: binary_sensor
          device_class: connectivity
    hasppage:
      name: "HASP Page"
      description: "Select the HASP page (1-3) for the temperature"
      selector:
        number:
          min: 1
          max: 3
          mode: box
    haspbutton:
      name: "HASP Button"
      description: "Select the HASP button (4-7) for the temperature.  Refer to the object map in the HASP documentation."
      selector:
        number:
          min: 4
          max: 7
          mode: box
    weather_provider:
      name: "Weather provider"
      description: "Select the weather provider to obtain the temperature"
      selector:
        entity:
          domain: weather
    suffix:
      name: "Temperature display suffix"
      description: 'Suffix for temperature display - 0:"", 1:"°", 2:"°F", 3:"°C"'
      selector:
        number:
          min: 0
          max: 3
          mode: box
    thermometer_empty_color:
      name: "Thermometer empty color"
      description: "Icon color for an empty thermometer in Nextion RGB565 format. -1: Current theme foreground color, 2047: Ice blue"
      selector:
        number:
          min: -1
          max: 65535
          mode: box
    thermometer_quarter_threshold:
      name: "Thermometer one quarter threshold"
      description: "Temperatures above this threshold will show a one-quarter full thermometer.  Below, show an empty thermometer."
      selector:
        number:
          min: -20
          max: 125
          mode: box
    thermometer_quarter_color:
      name: "Thermometer one quarter color"
      description: "Icon color for a one-quarter full thermometer in Nextion RGB565 format. -1: Current theme foreground color, 31: Blue"
      selector:
        number:
          min: -1
          max: 65535
          mode: box
    thermometer_half_threshold:
      name: "Thermometer half threshold"
      description: "Temperatures above this threshold will show a half full thermometer.  This value must be higher than the value selected above."
      selector:
        number:
          min: -10
          max: 125
          mode: box
    thermometer_half_color:
      name: "Thermometer half color"
      description: "Icon color for a half full thermometer in Nextion RGB565 format. -1: Current theme foreground color, 65504: Yellow"
      selector:
        number:
          min: -1
          max: 65535
          mode: box
    thermometer_three_quarter_threshold:
      name: "Thermometer three quarter threshold"
      description: "Temperatures above this threshold will show a three-quarters full thermometer.  This value must be higher than the value selected above."
      selector:
        number:
          min: 0
          max: 125
          mode: box
    thermometer_three_quarter_color:
      name: "Thermometer three quarter color"
      description: "Icon color for a three-quarter full thermometer in Nextion RGB565 format. -1: Current theme foreground color, 64512: Orange"
      selector:
        number:
          min: -1
          max: 65535
          mode: box
    thermometer_full_threshold:
      name: "Thermometer full threshold"
      description: "Temperatures above this threshold will show a full thermometer.  This value must be higher than the value selected above."
      selector:
        number:
          min: 10
          max: 125
          mode: box
    thermometer_full_color:
      name: "Thermometer full color"
      description: "Icon color for a full thermometer in Nextion RGB565 format. -1: Current theme foreground color, 63488: Red"
      selector:
        number:
          min: -1
          max: 65535
          mode: box
    colortemp:
      name: "Colorize temperature text"
      description: "Also apply icon colors to text"
      selector:
        boolean:

mode: single
max_exceeded: silent

variables:
  haspconnected: !input haspconnected
  haspname: '{{ haspconnected.split(".")[1].split("_connected")[0] }}'
  hasppage: !input hasppage
  haspbutton: !input haspbutton
  weather_provider: !input weather_provider
  suffix: !input suffix
  thermometer_empty_color: !input thermometer_empty_color
  thermometer_quarter_threshold: !input thermometer_quarter_threshold
  thermometer_quarter_color: !input thermometer_quarter_color
  thermometer_half_threshold: !input thermometer_half_threshold
  thermometer_half_color: !input thermometer_half_color
  thermometer_three_quarter_threshold: !input thermometer_three_quarter_threshold
  thermometer_three_quarter_color: !input thermometer_three_quarter_color
  thermometer_full_threshold: !input thermometer_full_threshold
  thermometer_full_color: !input thermometer_full_color
  colortemp: !input colortemp
  jsontopic: '{{ "hasp/" ~ haspname ~ "/state/json" }}'
  jsoncommandtopic: '{{ "hasp/" ~ haspname ~ "/command/json" }}'
  activepage: '{% set activepage_entity = "input_number.hasp_" ~ haspname ~ "_activepage" %}{{ states(activepage_entity) | int }}'
  fgcolor: '{% set fgcolor_entity = "input_number.hasp_" ~ haspname ~ "_selectedforegroundcolor" %}{{ states(fgcolor_entity) | int }}'
  haspobject: '{{ "p[" ~ hasppage ~ "].b[" ~ haspbutton ~ "]" }}'
  temperature: '{{state_attr(weather_provider, "temperature")}}'
  tempicon: "{% set temp = temperature|int %}{% if temp <= thermometer_quarter_threshold|int -%}{% elif temp < thermometer_half_threshold|int %}{% elif temp < thermometer_three_quarter_threshold|int %}{% elif temp < thermometer_full_threshold|int %}{% else %}{%- endif %}"
  tempcolor: "{% set temp = temperature|int %}{% if temp <= thermometer_quarter_threshold|int -%}{% set color = thermometer_empty_color%}{% elif temp < thermometer_half_threshold|int %}{% set color = thermometer_quarter_color %}{% elif temp < thermometer_three_quarter_threshold|int %}{% set color = thermometer_half_color %}{% elif temp < thermometer_full_threshold|int %}{% set color = thermometer_three_quarter_color %}{% else %}{% set color = thermometer_full_color%}{% endif %}{% if color|int < 0 -%}{{fgcolor}}{% else %}{{color}}{% endif %}"
  suffixstring: '{% if suffix == "1" %}°{% elif suffix == "2" %}°F{% elif suffix == "3" %}°C{% endif %}'
  textstring: "{{temperature}}{{suffixstring}}"
  textfont: "10"
  textcolor: "{%- if colortemp == true -%}{{tempcolor}}{% else %}{{fgcolor}}{% endif %}"
  ypos: "{{(haspbutton|int - 4) * 67 + 2}}"
  xpos: "0"
  iconwidth: "40"
  iconheight: "65"
  iconfont: "8"

trigger:
  - platform: state
    entity_id: !input haspconnected
    to: "on"
  - platform: homeassistant
    event: start
  - platform: state
    entity_id: !input weather_provider
  - platform: mqtt
    topic: "hasp/+/state/json"

condition:
  - condition: state
    entity_id: !input haspconnected
    state: "on"

action:
  - choose:
      - conditions: # Update temperature if our weather provider changed state
          - condition: template
            value_template: '{{ (trigger.platform == "state") and (trigger.entity_id == weather_provider) }}'
        sequence:
          - service: mqtt.publish
            data_template:
              topic: "hasp/{{haspname}}/command/json"
              payload: '["{{haspobject}}.pco={{textcolor}}","{{haspobject}}.txt=\"{{textstring}} \""{%- if activepage|int == hasppage|int -%},"delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{tempcolor}},0,1,1,3,\"{{tempicon}}\""{%- endif -%}]'
      - conditions: # Catch MQTT events
          - condition: template
            value_template: '{{ trigger.platform == "mqtt" }}'
        sequence:
          - choose:
              - conditions: # Somebody pressed our button which hides the overlaid icon.  Put it back.
                  - condition: template
                    value_template: '{{ (trigger.topic == jsontopic ) and (trigger.payload_json.event == haspobject ) and (trigger.payload_json.value == "OFF") }}'
                sequence:
                  - service: mqtt.publish
                    data_template:
                      topic: "hasp/{{haspname}}/command/json"
                      payload: '["xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{tempcolor}},0,1,1,3,\"{{tempicon}}\""]'
              - conditions: # Page changed to our page, so place the icon on the screen.
                  - condition: template
                    value_template: '{{ (trigger.topic == jsontopic ) and (trigger.payload_json.event == "page" ) and (trigger.payload_json.value == hasppage|int) }}'
                sequence:
                  - service: mqtt.publish
                    data_template:
                      topic: "hasp/{{haspname}}/command/json"
                      payload: '["xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{tempcolor}},0,1,1,3,\"{{tempicon}}\""]'
    default: # Otherwise send the text + icon to the button
      - service: mqtt.publish
        data_template:
          topic: "hasp/{{haspname}}/command/json"
          payload: '["{{haspobject}}.font={{textfont}}","{{haspobject}}.xcen=2","{{haspobject}}.ycen=2","{{haspobject}}.pco={{textcolor}}","{{haspobject}}.txt=\"{{textstring}} \""{%- if activepage|int == hasppage|int -%},"delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{tempcolor}},0,1,1,3,\"{{tempicon}}\""{%- endif -%}]'
