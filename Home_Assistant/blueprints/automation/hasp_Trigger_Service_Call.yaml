blueprint:
  name: "plate01 p[x].b[y] triggers a service call"
  description: |
    
    # Description

    A HASP button triggers a service call with provided options.

    This automation does not display any text on the selected button.  You can combine it with blueprints like "Display Text" or "Display Template" for a button which says things and does stuff.

    ## HASP Page and Button reference

    <details>

    | Page 0 | Pages 1-3 | Pages 4-5 |
    |--------|-----------|-----------|
    | ![Page 0](https://github.com/aderusha/HASwitchPlate/raw/master/Documentation/Images/NextionUI_p0_Init_Screen.png?raw=true) | ![Pages 1-3](https://github.com/aderusha/HASwitchPlate/raw/master/Documentation/Images/NextionUI_p1-p3_4buttons.png?raw=true) | ![Pages 4-5](https://github.com/aderusha/HASwitchPlate/raw/master/Documentation/Images/NextionUI_p4-p5_3sliders.png?raw=true) |

    | Page 6 | Page 7 | Page 8 |
    |--------|--------|--------|
    | ![Page 6](https://github.com/aderusha/HASwitchPlate/raw/master/Documentation/Images/NextionUI_p6_8buttons.png?raw=true) | ![Page 7](https://github.com/aderusha/HASwitchPlate/raw/master/Documentation/Images/NextionUI_p7_12buttons.png?raw=true) | ![Page 8](https://github.com/aderusha/HASwitchPlate/raw/master/Documentation/Images/NextionUI_p8_5buttons+1slider.png?raw=true) |

    | Page 9 | Page 10 | Page 11 |
    |--------|---------|---------|
    | ![Page 9](https://github.com/aderusha/HASwitchPlate/raw/master/Documentation/Images/NextionUI_p9_9buttons.png?raw=true) | ![Page 10](https://github.com/aderusha/HASwitchPlate/raw/master/Documentation/Images/NextionUI_p10_5buttons.png?raw=true) | ![Page 11](https://github.com/aderusha/HASwitchPlate/raw/master/Documentation/Images/NextionUI_p11_1button.png?raw=true)

    </details>

  source_url: "https://github.com/aderusha/HASwitchPlate/blob/master/Home_Assistant/blueprints/automation/hasp_Trigger_Service_Call.yaml"
  domain: automation
  input:
    haspconnected:
      name: "HASP Device"
      description: "Select the HASP device"
      selector:
        entity:
          integration: mqtt
          domain: binary_sensor
          device_class: connectivity
    hasppage:
      name: "HASP Page"
      description: "Select the HASP page (1-11)."
      default: 1
      selector:
        number:
          min: 1
          max: 11
          mode: box
    haspbutton:
      name: "HASP Button"
      description: "Select the HASP button (4-15).  Refer to the object map in the HASP documentation"
      default: 4
      selector:
        number:
          min: 4
          max: 15
          mode: box
    service_name:
      name: "Service name"
      description: "Full name (<domain>.<service>) of the service to call, example: light.turn_on"
      default: "light.turn_on"
      selector:
        text:
    service_data:
      name: Service data object
      description: "Service data in YAML format. you can copy and paste from Developer Tools > Services > Service Data"
      default:
        entity_id: light.plate01_backlight
        brightness: 50
      selector:
        object:
    trigger_on_press:
      name: "Trigger service on button press"
      default: true
      selector:
        boolean:
    trigger_on_release:
      name: "Trigger service on button release"
      default: false
      selector:
        boolean:

mode: parallel
max_exceeded: silent

variables:
  haspconnected: !input haspconnected
  haspname: '{{ haspconnected.split(".")[1].split("_connected")[0] }}'
  hasppage: !input hasppage
  haspbutton: !input haspbutton
  service_name: !input service_name
  service_data: !input service_data
  trigger_on_press: !input trigger_on_press
  trigger_on_release: !input trigger_on_release
  haspobject: '{{ "p[" ~ hasppage ~ "].b[" ~ haspbutton ~ "]" }}'
  jsontopic: '{{ "hasp/" ~ haspname ~ "/state/json" }}'

trigger:
  - platform: mqtt
    topic: "hasp/+/state/json"

condition:
  - condition: state
    entity_id: !input haspconnected
    state: "on"

action:
  - choose:
      #########################################################################
      # Trigger service when "EXECUTE" is pressed by the user
      - conditions:
          - condition: template
            value_template: "{{ trigger is not defined }}"
        sequence:
          - service: !input service_name
            data: !input service_data
      #########################################################################
      # Catch triggers fired by incoming MQTT messages
      - conditions:
          - condition: template
            value_template: '{{ trigger.platform == "mqtt" }}'
        sequence:
          - choose:
              #########################################################################
              # Primary function: Trigger service call in response to our selected button being pressed ON
              - conditions:
                  - condition: template
                    value_template: '{{ (trigger.topic == jsontopic) and (trigger.payload_json.event == haspobject) and (trigger.payload_json.value == "ON") and trigger_on_press }}'
                sequence:
                  - service: !input service_name
                    data: !input service_data
              #########################################################################
              # Primary function: Trigger service call in response to our selected button being released OFF
              - conditions:
                  - condition: template
                    value_template: '{{ (trigger.topic == jsontopic) and (trigger.payload_json.event == haspobject) and (trigger.payload_json.value == "OFF") and trigger_on_release }}'
                sequence:
                  - service: !input service_name
                    data: !input service_data
