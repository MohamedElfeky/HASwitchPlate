blueprint:
  name: "plate01 p[x].b[y] triggers a scene"
  description: "Press a button on the HASP to trigger a scene"
  source_url: "https://github.com/aderusha/HASwitchPlate/blob/dev/Home_Assistant/blueprints/automation/hasp_Trigger_Scene.yaml"
  domain: automation
  input:
    haspconnected:
      name: "HASP Device"
      description: "Select the HASP device"
      selector:
        entity:
          integration: mqtt
          domain: binary_sensor
          device_class: connectivity
    page:
      name: "HASP Page"
      description: "Select the HASP page (1-11) for this scene button"
      selector:
        number:
          min: 1
          max: 11
          mode: box
    button:
      name: "HASP Button"
      description: "Select the HASP button for this scene"
      selector:
        number:
          min: 4
          max: 15
          mode: box
    scene:
      name: "Scene to trigger"
      description: "Select a scene for this button to trigger"
      selector:
        entity:
          domain: scene
    text:
      name: "HASP Button Text"
      description: "Enter text to appear on the button"
    font:
      name: "HASP Button Font"
      description: "Select the text font for this button label"
      selector:
        number:
          min: 0
          max: 10
          mode: slider
    xcen:
      name: "Text horizontal alignment"
      description: "Horizontal text alignment: 0=Left 1=Center 2=Right"
      selector:
        number:
          min: 0
          max: 2
          mode: box
    ycen:
      name: "Text vertical alignment"
      description: "Vertical text alignment: 0=Top 1=Center 2=Bottom"
      selector:
        number:
          min: 0
          max: 2
          mode: box
    wrap:
      name: "Text wrap"
      description: "Enable line-wrapping text if too long to fit in the button."
      selector:
        boolean:

mode: parallel
max_exceeded: silent

variables:
  haspconnected: !input haspconnected
  haspname: '{{ haspconnected.split(".")[1].split("_connected")[0] }}'
  page: !input page
  button: !input button
  text: !input text
  font: !input font
  xcen: !input xcen
  ycen: !input ycen
  wrap: !input wrap
  isbr: "{% if wrap == true %}1{% else %}0{% endif %}"
  haspobject: '{{ "p[" ~ page ~ "].b[" ~ button ~ "]" }}'
  commandtopic: '{{ "hasp/" ~ haspname ~ "/command/" ~ haspobject }}'
  jsontopic: '{{ "hasp/" ~ haspname ~ "/state/json" }}'
  jsoncommandtopic: '{{ "hasp/" ~ haspname ~ "/command/json" }}'
  selectedforegroundcolortopic: '{{ "hasp/" ~ haspname ~ "/light/selectedforegroundcolor/rgb" }}'
  selectedbackgroundcolortopic: '{{ "hasp/" ~ haspname ~ "/light/selectedbackgroundcolor/rgb" }}'
  unselectedforegroundcolortopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedforegroundcolor/rgb" }}'
  unselectedbackgroundcolortopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedbackgroundcolor/rgb" }}'
  selectedfg: >-
    {%- set colorsource="light." ~ haspname ~ "_selected_foreground_color" -%}
    {%- set red=(state_attr(colorsource, "rgb_color")[0] * (state_attr(colorsource, "brightness") / 255))|int -%}
    {%- set green=(state_attr(colorsource, "rgb_color")[1] * (state_attr(colorsource, "brightness") / 255))|int -%}
    {%- set blue=(state_attr(colorsource, "rgb_color")[2] * (state_attr(colorsource, "brightness") / 255))|int -%}
    {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}
  selectedbg: >-
    {%- set colorsource="light." ~ haspname ~ "_selected_background_color" -%}
    {%- set red=(state_attr(colorsource, "rgb_color")[0] * (state_attr(colorsource, "brightness") / 255))|int -%}
    {%- set green=(state_attr(colorsource, "rgb_color")[1] * (state_attr(colorsource, "brightness") / 255))|int -%}
    {%- set blue=(state_attr(colorsource, "rgb_color")[2] * (state_attr(colorsource, "brightness") / 255))|int -%}
    {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}
  unselectedfg: >-
    {%- set colorsource="light." ~ haspname ~ "_unselected_foreground_color" -%}
    {%- set red=(state_attr(colorsource, "rgb_color")[0] * (state_attr(colorsource, "brightness") / 255))|int -%}
    {%- set green=(state_attr(colorsource, "rgb_color")[1] * (state_attr(colorsource, "brightness") / 255))|int -%}
    {%- set blue=(state_attr(colorsource, "rgb_color")[2] * (state_attr(colorsource, "brightness") / 255))|int -%}
    {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}
  unselectedbg: >-
    {%- set colorsource="light." ~ haspname ~ "_unselected_background_color" -%}
    {%- set red=(state_attr(colorsource, "rgb_color")[0] * (state_attr(colorsource, "brightness") / 255))|int -%}
    {%- set green=(state_attr(colorsource, "rgb_color")[1] * (state_attr(colorsource, "brightness") / 255))|int -%}
    {%- set blue=(state_attr(colorsource, "rgb_color")[2] * (state_attr(colorsource, "brightness") / 255))|int -%}
    {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}

trigger:
  - platform: state
    entity_id: !input haspconnected
    to: "on"
  - platform: homeassistant
    event: start
  - platform: mqtt
    topic: "hasp/+/state/json"
  - platform: mqtt
    topic: "hasp/+/light/selectedforegroundcolor/rgb"
  - platform: mqtt
    topic: "hasp/+/light/selectedbackgroundcolor/rgb"
  - platform: mqtt
    topic: "hasp/+/light/unselectedforegroundcolor/rgb"
  - platform: mqtt
    topic: "hasp/+/light/unselectedbackgroundcolor/rgb"

condition:
  - condition: state
    entity_id: !input haspconnected
    state: "on"

action:
  - choose:
      #########################################################################
      # Apply text and style when "EXECUTE" is pressed by the user
      - conditions:
          - condition: template
            value_template: "{{ trigger is not defined }}"
        sequence:
        - service: mqtt.publish
          data_template:
            topic: "{{jsoncommandtopic}}"
            payload: >-
              [
              "{{haspobject}}.font={{font}}",
              "{{haspobject}}.xcen={{xcen}}",
              "{{haspobject}}.ycen={{ycen}}",
              "{{haspobject}}.isbr={{isbr}}",
              "{{haspobject}}.pco={{selectedfg}}",
              "{{haspobject}}.bco={{selectedbg}}",
              "{{haspobject}}.pco2={{unselectedfg}}",
              "{{haspobject}}.bco2={{unselectedbg}}",
              "{{haspobject}}.txt=\"{{text}}\""
              ]
      #########################################################################
      # Catch triggers fired by incoming MQTT messages
      - conditions:
          - condition: template
            value_template: '{{ trigger.platform == "mqtt" }}'
        sequence:
          - choose:
              #########################################################################
              # Primary function: Activate a scene in response to our selected button being pressed ON
              - conditions:
                  - condition: template
                    value_template: '{{ (trigger.topic == jsontopic) and (trigger.payload_json.event == haspobject) and (trigger.payload_json.value == "ON") }}'
                sequence:
                  - service: scene.turn_on
                    entity_id: !input scene
              #########################################################################
              # Theme: Apply selected foreground color when it changes
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == selectedforegroundcolortopic }}"
                sequence:
                  - service: mqtt.publish
                    data_template:
                      topic: "{{commandtopic}}.pco"
                      payload: "{{trigger.payload}}"
              #########################################################################
              # Theme: Apply selected background color on change
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == selectedbackgroundcolortopic }}"
                sequence:
                  - service: mqtt.publish
                    data_template:
                      topic: "{{commandtopic}}.bco"
                      payload: "{{trigger.payload}}"
              #########################################################################
              # Theme: Apply unselected foreground color on change
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == unselectedforegroundcolortopic }}"
                sequence:
                  - service: mqtt.publish
                    data_template:
                      topic: "{{commandtopic}}.pco2"
                      payload: "{{trigger.payload}}"
              #########################################################################
              # Theme: Apply unselected background color on change
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == unselectedbackgroundcolortopic }}"
                sequence:
                  - service: mqtt.publish
                    data_template:
                      topic: "{{commandtopic}}.bco2"
                      payload: "{{trigger.payload}}"


    #########################################################################
    # Apply text and style when device is connected or home assistant starts
    default:
      - service: mqtt.publish
        data_template:
          topic: "{{jsoncommandtopic}}"
          payload: >-
            [
            "{{haspobject}}.font={{font}}",
            "{{haspobject}}.xcen={{xcen}}",
            "{{haspobject}}.ycen={{ycen}}",
            "{{haspobject}}.isbr={{isbr}}",
            "{{haspobject}}.pco={{selectedfg}}",
            "{{haspobject}}.bco={{selectedbg}}",
            "{{haspobject}}.pco2={{unselectedfg}}",
            "{{haspobject}}.bco2={{unselectedbg}}",
            "{{haspobject}}.txt=\"{{text}}\""
            ]
