blueprint:
  name: plate01 p[x].b[y] triggers a scene
  description: Press a button on the HASP to trigger a scene
  domain: automation
  input:
    hasp_name:
      name: HASP Device
      description: "Select the HASP device"
      selector:
        entity:
          integration: mqtt
          domain: binary_sensor
          device_class: connectivity
    # hasp_name:
    #   name: HASP Device
    #   description: "Select the HASP device"
    #   selector:
    #     device:
    #       manufacturer: "HASwitchPlate"
    #       model: "HASP v1.0.0"
    hasp_page:
      name: HASP Page
      description: "Select the HASP page (1-11) for this scene button"
      selector:
        number:
          min: 1
          max: 11
          mode: box
    hasp_button:
      name: HASP Button
      description: "Select the HASP button for this scene"
      selector:
        number:
          min: 4
          max: 15
          mode: box
    hasp_scene:
      name: Scene to trigger
      description: "Select a scene for this button to trigger"
      selector:
        entity:
          domain: scene
    hasp_label:
      name: HASP Button Label
      description: "Enter text to appear on the button"
    hasp_font:
      name: HASP Button Font
      description: "Select the text font for this button label"
      selector:
        number:
          min: 0
          max: 10
          mode: slider

mode: restart
max_exceeded: silent

variables:
  haspname: !input hasp_name
  hasppage: !input hasp_page
  haspbutton: !input hasp_button
  hasplabel: !input hasp_label
  haspfont: !input hasp_font

trigger:
  - platform: state
    entity_id: !input hasp_name
    to: "on"
  - platform: homeassistant
    event: start
  - platform: mqtt
    topic: "hasp/+/state/json"

action:
  - choose:
    # Catch the button press and trigger a scene in response
    - conditions:
      - condition: template
        value_template: '{% set haspnode=haspname.split(".")[1].split("_connected")[0] %}{{ (trigger.platform == "mqtt") and (trigger.topic == "hasp/" + haspnode + "/state/json") and (trigger.payload_json.event == "p[" + hasppage + "].b[" + haspbutton + "]") and (trigger.payload_json.value == "ON") }}'
      sequence:
      - service: scene.turn_on
        entity_id: !input hasp_scene
    # Catch our other triggers and apply the font+label to the button
    - conditions:
      - condition: template
        value_template: '{{ trigger.platform != "mqtt" }}'
      sequence:
      - service: mqtt.publish
        data_template:
          topic: '{% set haspnode=haspname.split(".")[1].split("_connected")[0] %}hasp/{{haspnode}}/command/json'
          payload: '["p[{{hasppage}}].b[{{haspbutton}}].font={{haspfont}}","p[{{hasppage}}].b[{{haspbutton}}].txt=\"{{hasplabel}}\""]'

