blueprint:
  name: "plate01 Core HASP functionality"
  description: |

    # Description

    Provides core HASP functionality. Deploy one copy of this blueprint for each HASP device.

    ![Preview](https://github.com/aderusha/HASwitchPlate/raw/master/Documentation/Images/hasp_Core_Functionality.png?raw=true)

    ## HASP Font reference

    <details>

    The Nextion display supports monospaced and proportional fonts.  For proportional fonts, the HASP project includes [Consolas](https://docs.microsoft.com/en-us/typography/font-list/consolas) in 4 sizes and [Webdings](https://en.wikipedia.org/wiki/Webdings#Character_set) in 1 size.

    | Number | Font              | Characters per line | Lines per button |
    |--------|-------------------|---------------------|------------------|
    | 0      | Consolas 24 point | 20 characters       | 2 lines          |
    | 1      | Consolas 32 point | 15 characters       | 2 lines          |
    | 2      | Consolas 48 point | 10 characters       | 1 lines          |
    | 3      | Consolas 80 point | 6 characters        | 1 lines          |
    | 4      | Webdings 56 point | 8 characters        | 1 lines          |

    The HASP also includes [Google's "Noto Sans"](https://github.com/googlefonts/noto-fonts) proportional font in 5 sizes.  These fonts also include [1400+ icons which you can copy and paste from here](https://htmlpreview.github.io/?https://github.com/aderusha/HASwitchPlate/blob/master/Documentation/Images/hasp-fontawesome5.html)

    | Number | Font                       |
    |--------|----------------------------|
    | 5      | Noto Sans Regular 24 point |
    | 6      | Noto Sans Regular 32 point |
    | 7      | Noto Sans Regular 48 point |
    | 8      | Noto Sans Regular 64 point |
    | 9      | Noto Sans Regular 80 point |
    | 10     | Noto Sans Bold 80 point    |

    ![HASP Fonts 0-3](https://github.com/aderusha/HASwitchPlate/raw/master/Documentation/Images/NextionUI_Fonts_0-3.png?raw=true) ![HASP Fonts 4-7](https://github.com/aderusha/HASwitchPlate/raw/master/Documentation/Images/NextionUI_Fonts_4-7.png?raw=true) ![HASP Fonts 8-10](https://github.com/aderusha/HASwitchPlate/raw/master/Documentation/Images/NextionUI_Fonts_8-10.png?raw=true)

    </details>

  source_url: "https://github.com/aderusha/HASwitchPlate/blob/master/Home_Assistant/blueprints/automation/hasp_Core_Functionality.yaml"
  domain: automation
  input:
    haspconnected:
      name: "HASP Device"
      description: "Select the HASP device"
      selector:
        entity:
          integration: mqtt
          domain: binary_sensor
          device_class: connectivity
    page1text:
      name: "Page select button 1 text"
      description: "Enter text to appear on the left-most page select button #1.  It's a small button, so keep it short.  6 character (or shorter) words are crisp and legible."
      default: "Page 1"
      selector:
        text:
    page1font:
      name: "Page select button 1 font"
      description: "Select the font for page select button #1.  Font 6 might be a good starting point.  You can refer to the HASP Font reference above to see available options."
      default: 6
      selector:
        number:
          min: 0
          max: 10
          mode: slider
    page1page:
      name: "Page select button 1 page"
      description: "Select the destination page for page select button #1.  When you click the left-most page button on the HASP, the HASP will flip to the page number you select here.  If this is your first time here, try page 1."
      default: 1
      selector:
        number:
          min: 0
          max: 11
          mode: slider
    page2text:
      name: "Page select button 2 text"
      description: "Enter text to appear on the center page select button #2. If page scrolling is enabled, use the Page Names list below."
      default: "Page 2"
      selector:
        text:
    page2font:
      name: "Page select button 2 font"
      description: "Select the font for page select button #2."
      default: 6
      selector:
        number:
          min: 0
          max: 10
          mode: slider
    page2page:
      name: "Page select button 2 page"
      description: "Select the destination page for page select button #2"
      default: 2
      selector:
        number:
          min: 0
          max: 11
          mode: slider
    page3text:
      name: "Page select button 3 text"
      description: "Enter text to appear on the right-most page select button #3"
      default: "Page 3"
      selector:
        text:
    page3font:
      name: "Page select button 3 font"
      description: "Select the font for page select button #3"
      default: 6
      selector:
        number:
          min: 0
          max: 10
          mode: slider
    page3page:
      name: "Page select button 3 page"
      description: "Select the destination page for page select button #3"
      default: 3
      selector:
        number:
          min: 0
          max: 11
          mode: slider
    page_scroll:
      name: "Enable page scrolling instead of page select"
      description: "If enabled, page buttons 1 and 3 will scroll up and down through available pages. The middle page button 2 will continue to select its assigned page number, but the label for page button 2 will be determined based on the Page Names defined below."
      default: false
      selector:
        boolean:
    page_scroll_list:
      name: "Page scroll list"
      description: "If page scrolling is enabled, set this list to include all active pages eligible for scrolling in the desired order. If a page is not being used, remove it from the list to skip it while scrolling up/down."
      default: "1,2,3,4,5,6,7,8,9,10,11"
      selector:
        text:
    page_names:
      name: "Page names"
      description: 'If page scrolling is enabled, the list here assigns the label seen on Page Button 2 for each page.  For example, if "page9" is set to "HVAC", when page 9 is selected the text "HVAC" will appear on the middle page select button.  If you prefer one single label for the page2 button on all pages, simply set each page to the same value.'
      default:
        page0: Page 0
        page1: Page 1
        page2: Page 2
        page3: Page 3
        page4: Page 4
        page5: Page 5
        page6: Page 6
        page7: Page 7
        page8: Page 8
        page9: Page 9
        page10: Page 10
        page11: Page 11
      selector:
        object:
    reset_hasp:
      name: "First-time HASP setup or reset"
      description: "Turn this on if this is a brand-new HASP (or you'd like to reset some default theme settings). Turn it on, hit save, and click EXECUTE to setup your HASP.  After the first run you can toggle this back off."
      default: true
      selector:
        boolean:

mode: parallel
max_exceeded: silent

variables:
  haspconnected: !input haspconnected
  page1text: !input page1text
  page1font: !input page1font
  page1page: !input page1page
  page2text: !input page2text
  page2font: !input page2font
  page2page: !input page2page
  page3text: !input page3text
  page3font: !input page3font
  page3page: !input page3page
  page_scroll: !input page_scroll
  page_scroll_list: !input page_scroll_list
  page_names: !input page_names
  reset_hasp: !input reset_hasp
  haspname: '{{ haspconnected.split(".")[1].split("_connected")[0] }}'
  activepage: '{% set activepage_entity = "number." ~ haspname ~ "_active_page" %}{{ states(activepage_entity) | int }}'
  statustopic: '{{ "hasp/" ~ haspname ~ "/status" }}'
  commandtopic: '{{ "hasp/" ~ haspname ~ "/command/" ~ haspobject }}'
  jsontopic: '{{ "hasp/" ~ haspname ~ "/state/json" }}'
  jsoncommandtopic: '{{ "hasp/" ~ haspname ~ "/command/json" }}'
  haspClientId: '{{state_attr("sensor." ~ haspname ~ "_sensor", "haspClientID")}}'
  haspMac: '{{state_attr("sensor." ~ haspname ~ "_sensor", "haspMac")}}'
  haspManufacturer: '{{state_attr("sensor." ~ haspname ~ "_sensor", "haspManufacturer")}}'
  haspModel: '{{state_attr("sensor." ~ haspname ~ "_sensor", "haspModel")}}'
  sw_version: '{{state_attr("sensor." ~ haspname ~ "_sensor", "espVersion")}}'
  default_selected_foreground_brightness: "1"
  default_selected_foreground_color: "[0, 0, 0]"
  default_selected_background_brightness: "255"
  default_selected_background_color: "[255, 255, 255]"
  default_unselected_foreground_brightness: "224"
  default_unselected_foreground_color: "[255, 255, 255]"
  default_unselected_background_brightness: "64"
  default_unselected_background_color: "[255, 255, 255]"
  selectedforegroundcolortopic: '{{ "hasp/" ~ haspname ~ "/light/selectedforegroundcolor/rgb" }}'
  selectedbackgroundcolortopic: '{{ "hasp/" ~ haspname ~ "/light/selectedbackgroundcolor/rgb" }}'
  unselectedforegroundcolortopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedforegroundcolor/rgb" }}'
  unselectedbackgroundcolortopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedbackgroundcolor/rgb" }}'
  page_button_trigger: "OFF"
  page_list: '{{page_scroll_list.split(",")}}'
  page_previous: >
    {%- set page = namespace() -%}
    {%- set page.previous = page_list[(page_list|length)-1]|int -%}
    {%- set page.next = page_list[0]|int -%}
    {%- for item in page_list -%}
      {%- if item|int == activepage -%}
        {%- if not loop.first -%}
          {%- set page.previous = loop.previtem|int -%}
        {%- endif -%}
        {%- if not loop.last -%}
          {%- set page.next = loop.nextitem|int -%}
        {%- endif -%}
      {%- endif -%}
    {%- endfor -%}{{page.previous}}
  page_next: >
    {%- set page = namespace() -%}
    {%- set page.previous = page_list[(page_list|length)-1]|int -%}
    {%- set page.next = page_list[0]|int -%}
    {%- for item in page_list -%}
      {%- if item|int == activepage -%}
        {%- if not loop.first -%}
          {%- set page.previous = loop.previtem|int -%}
        {%- endif -%}
        {%- if not loop.last -%}
          {%- set page.next = loop.nextitem|int -%}
        {%- endif -%}
      {%- endif -%}
    {%- endfor -%}{{page.next}}

trigger:
  - platform: state
    entity_id: !input haspconnected
    to: "on"
  - platform: homeassistant
    event: start
  - platform: mqtt
    topic: "hasp/+/state/json"
  - platform: mqtt
    topic: "hasp/+/light/selectedforegroundcolor/rgb"
  - platform: mqtt
    topic: "hasp/+/light/selectedbackgroundcolor/rgb"
  - platform: mqtt
    topic: "hasp/+/light/unselectedforegroundcolor/rgb"
  - platform: mqtt
    topic: "hasp/+/light/unselectedbackgroundcolor/rgb"

condition:
  - condition: state
    entity_id: !input haspconnected
    state: "on"

action:
  - choose:
      #########################################################################
      # Create required helpers and apply HASP defaults when "EXECUTE" is pressed by the user
      - conditions:
          - condition: template
            value_template: "{{ trigger is not defined }}"
        sequence:
          # Push discovery messages for RGB lights used to configure themes
          - service: mqtt.publish
            data_template:
              topic: "homeassistant/light/{{haspname}}/selectedforegroundcolor/config"
              payload: >-
                {"name":"{{haspname}} selected foreground color",
                "command_topic":"hasp/{{haspname}}/light/selectedforegroundcolor/switch",
                "state_topic":"hasp/{{haspname}}/status",
                "availability_topic":"hasp/{{haspname}}/status",
                "rgb_command_topic":"hasp/{{haspname}}/light/selectedforegroundcolor/rgb",
                "rgb_command_template": {% raw %}"{{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}",{% endraw %}
                "retain":true,
                "unique_id":"{{haspClientId}}-selectedforegroundcolor",
                "payload_on":"ON",
                "payload_off":"OFF",
                "payload_available":"ON",
                "payload_not_available":"OFF",
                "device":{"identifiers":["{{haspClientId}}"],
                "connections":[["mac","{{haspMac}}"]],
                "name":"{{haspname}}",
                "manufacturer":"{{haspManufacturer}}",
                "model":"{{haspModel}}",
                "sw_version":{{sw_version}}
                }}
              retain: true
          - service: mqtt.publish
            data_template:
              topic: "homeassistant/light/{{haspname}}/selectedbackgroundcolor/config"
              payload: >-
                {"name":"{{haspname}} selected background color",
                "command_topic":"hasp/{{haspname}}/light/selectedbackgroundcolor/switch",
                "state_topic":"hasp/{{haspname}}/status",
                "availability_topic":"hasp/{{haspname}}/status",
                "rgb_command_topic":"hasp/{{haspname}}/light/selectedbackgroundcolor/rgb",
                "rgb_command_template": {% raw %}"{{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}",{% endraw %}
                "retain":true,
                "unique_id":"{{haspClientId}}-selectedbackgroundcolor",
                "payload_on":"ON",
                "payload_off":"OFF",
                "payload_available":"ON",
                "payload_not_available":"OFF",
                "device":{
                "identifiers":["{{haspClientId}}"],
                "connections":[["mac","{{haspMac}}"]],
                "name":"{{haspname}}",
                "manufacturer":"{{haspManufacturer}}",
                "model":"{{haspModel}}",
                "sw_version":{{sw_version}}
                }}
              retain: true
          - service: mqtt.publish
            data_template:
              topic: "homeassistant/light/{{haspname}}/unselectedforegroundcolor/config"
              payload: >-
                {"name":"{{haspname}} unselected foreground color",
                "command_topic":"hasp/{{haspname}}/light/unselectedforegroundcolor/switch",
                "state_topic":"hasp/{{haspname}}/status",
                "availability_topic":"hasp/{{haspname}}/status",
                "rgb_command_topic":"hasp/{{haspname}}/light/unselectedforegroundcolor/rgb",
                "rgb_command_template": {% raw %}"{{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}",{% endraw %}
                "retain":true,
                "unique_id":"{{haspClientId}}-unselectedforegroundcolor",
                "payload_on":"ON",
                "payload_off":"OFF",
                "payload_available":"ON",
                "payload_not_available":"OFF",
                "device":{"identifiers":["{{haspClientId}}"],
                "connections":[["mac","{{haspMac}}"]],
                "name":"{{haspname}}",
                "manufacturer":"{{haspManufacturer}}",
                "model":"{{haspModel}}",
                "sw_version":{{sw_version}}
                }}
              retain: true
          - service: mqtt.publish
            data_template:
              topic: "homeassistant/light/{{haspname}}/unselectedbackgroundcolor/config"
              payload: >-
                {"name":"{{haspname}} unselected background color",
                "command_topic":"hasp/{{haspname}}/light/unselectedbackgroundcolor/switch",
                "state_topic":"hasp/{{haspname}}/status",
                "availability_topic":"hasp/{{haspname}}/status",
                "rgb_command_topic":"hasp/{{haspname}}/light/unselectedbackgroundcolor/rgb",
                "rgb_command_template": {% raw %}"{{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}",{% endraw %}
                "retain":true,
                "unique_id":"{{haspClientId}}-unselectedbackgroundcolor",
                "payload_on":"ON",
                "payload_off":"OFF",
                "payload_available":"ON",
                "payload_not_available":"OFF",
                "device":{"identifiers":["{{haspClientId}}"],
                "connections":[["mac","{{haspMac}}"]],
                "name":"{{haspname}}",
                "manufacturer":"{{haspManufacturer}}",
                "model":"{{haspModel}}",
                "sw_version":{{sw_version}}
                }}
              retain: true
          # Send page select button config
          - service: mqtt.publish
            data_template:
              topic: "{{jsoncommandtopic}}"
              payload_template: >-
                [{% for p in range(1,12) %}"p[{{p}}].b[1].font={{page1font}}","p[{{p}}].b[1].txt=\"{{page1text}}\"",{% endfor %}"delay=1",
                {% for p in range(1,12) %}"p[{{p}}].b[2].font={{page2font}}","p[{{p}}].b[2].txt=\"{% if page_scroll %}{{page_names.get("page" ~ p)}}{% else %}{{page2text}}{% endif %}\"",{% endfor %}"delay=1",
                {% for p in range(1,12) %}"p[{{p}}].b[3].font={{page3font}}","p[{{p}}].b[3].txt=\"{{page3text}}\"",{% endfor %}"delay=1"]

          #########################################################################
          # Check if reset_hasp is enabled, then push some defaults to the device
          - condition: template
            value_template: "{{ reset_hasp }}"
          - service: light.turn_on
            data_template:
              entity_id: "light.{{haspname}}_selected_foreground_color"
              rgb_color: "{{default_selected_foreground_color}}"
          - service: light.turn_on
            data_template:
              entity_id: "light.{{haspname}}_selected_foreground_color"
              brightness: "{{default_selected_foreground_brightness}}"
          - service: light.turn_on
            data_template:
              entity_id: "light.{{haspname}}_selected_background_color"
              rgb_color: "{{default_selected_background_color}}"
          - service: light.turn_on
            data_template:
              entity_id: "light.{{haspname}}_selected_background_color"
              brightness: "{{default_selected_background_brightness}}"
          - service: light.turn_on
            data_template:
              entity_id: "light.{{haspname}}_unselected_foreground_color"
              rgb_color: "{{default_unselected_foreground_color}}"
          - service: light.turn_on
            data_template:
              entity_id: "light.{{haspname}}_unselected_foreground_color"
              brightness: "{{default_unselected_foreground_brightness}}"
          - service: light.turn_on
            data_template:
              entity_id: "light.{{haspname}}_unselected_background_color"
              rgb_color: "{{default_unselected_background_color}}"
          - service: light.turn_on
            data_template:
              entity_id: "light.{{haspname}}_unselected_background_color"
              brightness: "{{default_unselected_background_brightness}}"
          - service: mqtt.publish
            data_template:
              topic: "hasp/{{haspname}}/command/page"
              payload: "{{page1page}}"
              retain: false

      #########################################################################
      # Push configuration to device when it connects
      - conditions:
          - condition: template
            value_template: '{{ trigger.platform == "state" and trigger.entity_id == haspconnected }}'
        sequence:
          - service: mqtt.publish # send page button text
            data_template:
              topic: "{{jsoncommandtopic}}"
              payload_template: >-
                [{% for p in range(1,12) %}"p[{{p}}].b[1].font={{page1font}}","p[{{p}}].b[1].txt=\"{{page1text}}\"",{% endfor %}"delay=1",
                {% for p in range(1,12) %}"p[{{p}}].b[2].font={{page2font}}","p[{{p}}].b[2].txt=\"{% if page_scroll %}{{page_names.get("page" ~ p)}}{% else %}{{page2text}}{% endif %}\"",{% endfor %}"delay=1",
                {% for p in range(1,12) %}"p[{{p}}].b[3].font={{page3font}}","p[{{p}}].b[3].txt=\"{{page3text}}\"",{% endfor %}"delay=1"]
          - service: mqtt.publish # apply selected foreground color to page select buttons
            data_template:
              topic: "{{jsoncommandtopic}}"
              payload: >-
                {%- set colorsource="light." ~ haspname ~ "_selected_foreground_color" -%}
                {%- set red=(state_attr(colorsource, "rgb_color")[0] * (state_attr(colorsource, "brightness") / 255))|int -%}
                {%- set green=(state_attr(colorsource, "rgb_color")[1] * (state_attr(colorsource, "brightness") / 255))|int -%}
                {%- set blue=(state_attr(colorsource, "rgb_color")[2] * (state_attr(colorsource, "brightness") / 255))|int -%}
                {%- set colorcode = (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int -%}
                [{%- if not page_scroll -%}{%- for p in range(1,12) %}{%- if p == page1page|int %}"p[{{p}}].b[1].pco={{colorcode}}"{%- else -%}"p[{{p}}].b[1].pco2={{colorcode}}"{%- endif -%},{%- endfor -%}
                {%- else -%}{%- for p in range(1,12) %}"p[{{p}}].b[1].pco2={{colorcode}}",{%- endfor -%}{%- endif -%}"delay=1",
                {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].pco={{colorcode}}"{%- else -%}"p[{{p}}].b[2].pco2={{colorcode}}"{%- endif -%},{%- endfor -%}"delay=1",
                {%- if not page_scroll -%}{%- for p in range(1,12) %}{%- if p == page3page|int %}"p[{{p}}].b[3].pco={{colorcode}}"{%- else -%}"p[{{p}}].b[3].pco2={{colorcode}}"{%- endif -%},{%- endfor -%}
                {%- else -%}{%- for p in range(1,12) %}"p[{{p}}].b[3].pco2={{colorcode}}",{%- endfor -%}{%- endif -%}"delay=1"]
          - service: mqtt.publish # apply selected background color to page select buttons
            data_template:
              topic: "{{jsoncommandtopic}}"
              payload: >-
                {%- set colorsource="light." ~ haspname ~ "_selected_background_color" -%}
                {%- set red=(state_attr(colorsource, "rgb_color")[0] * (state_attr(colorsource, "brightness") / 255))|int -%}
                {%- set green=(state_attr(colorsource, "rgb_color")[1] * (state_attr(colorsource, "brightness") / 255))|int -%}
                {%- set blue=(state_attr(colorsource, "rgb_color")[2] * (state_attr(colorsource, "brightness") / 255))|int -%}
                {%- set colorcode = (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int -%}
                [{%- if not page_scroll -%}{%- for p in range(1,12) %}{%- if p == page1page|int %}"p[{{p}}].b[1].bco={{colorcode}}"{%- else -%}"p[{{p}}].b[1].bco2={{colorcode}}"{%- endif -%},{%- endfor -%}
                {% else %}{%- for p in range(1,12) %}"p[{{p}}].b[1].bco2={{colorcode}}",{%- endfor -%}{%- endif -%}"delay=1",
                {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].bco={{colorcode}}"{%- else -%}"p[{{p}}].b[2].bco2={{colorcode}}"{%- endif -%},{%- endfor -%}"delay=1",
                {%- if not page_scroll -%}{%- for p in range(1,12) %}{%- if p == page3page|int %}"p[{{p}}].b[3].bco={{colorcode}}"{%- else -%}"p[{{p}}].b[3].bco2={{colorcode}}"{%- endif -%},{%- endfor -%}
                {% else %}{%- for p in range(1,12) %}"p[{{p}}].b[3].bco2={{colorcode}}",{%- endfor -%}{%- endif -%}"delay=1"]
          - service: mqtt.publish # apply unselected foreground color to page select buttons
            data_template:
              topic: "{{jsoncommandtopic}}"
              payload: >-
                {%- set colorsource="light." ~ haspname ~ "_unselected_foreground_color" -%}
                {%- set red=(state_attr(colorsource, "rgb_color")[0] * (state_attr(colorsource, "brightness") / 255))|int -%}
                {%- set green=(state_attr(colorsource, "rgb_color")[1] * (state_attr(colorsource, "brightness") / 255))|int -%}
                {%- set blue=(state_attr(colorsource, "rgb_color")[2] * (state_attr(colorsource, "brightness") / 255))|int -%}
                {%- set colorcode = (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int -%}
                [{%- if not page_scroll -%}{%- for p in range(1,12) %}{%- if p == page1page|int %}"p[{{p}}].b[1].pco2={{colorcode}}"{%- else -%}"p[{{p}}].b[1].pco={{colorcode}}"{%- endif -%},{%- endfor -%}
                {% else %}{%- for p in range(1,12) %}"p[{{p}}].b[1].pco={{colorcode}}",{%- endfor -%}{%- endif -%}"delay=1",
                {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].pco2={{colorcode}}"{%- else -%}"p[{{p}}].b[2].pco={{colorcode}}"{%- endif -%},{%- endfor -%}"delay=1",
                {%- if not page_scroll -%}{%- for p in range(1,12) %}{%- if p == page3page|int %}"p[{{p}}].b[3].pco2={{colorcode}}"{%- else -%}"p[{{p}}].b[3].pco={{colorcode}}"{%- endif -%},{%- endfor -%}
                {% else %}{%- for p in range(1,12) %}"p[{{p}}].b[3].pco={{colorcode}}",{%- endfor -%}{%- endif -%}"delay=1"]
          - service: mqtt.publish # apply unselected background color to page select buttons
            data_template:
              topic: "{{jsoncommandtopic}}"
              payload: >-
                {%- set colorsource="light." ~ haspname ~ "_unselected_background_color" -%}
                {%- set red=(state_attr(colorsource, "rgb_color")[0] * (state_attr(colorsource, "brightness") / 255))|int -%}
                {%- set green=(state_attr(colorsource, "rgb_color")[1] * (state_attr(colorsource, "brightness") / 255))|int -%}
                {%- set blue=(state_attr(colorsource, "rgb_color")[2] * (state_attr(colorsource, "brightness") / 255))|int -%}
                {%- set colorcode = (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int -%}
                [{%- if not page_scroll -%}{%- for p in range(1,12) %}{%- if p == page1page|int %}"p[{{p}}].b[1].bco2={{colorcode}}"{%- else -%}"p[{{p}}].b[1].bco={{colorcode}}"{%- endif -%},{%- endfor -%}
                {% else %}{%- for p in range(1,12) %}"p[{{p}}].b[1].bco={{colorcode}}",{%- endfor -%}{%- endif -%}"delay=1",
                {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].bco2={{colorcode}}"{%- else -%}"p[{{p}}].b[2].bco={{colorcode}}"{%- endif -%},{%- endfor -%}"delay=1",
                {%- if not page_scroll -%}{%- for p in range(1,12) %}{%- if p == page3page|int %}"p[{{p}}].b[3].bco2={{colorcode}}"{%- else -%}"p[{{p}}].b[3].bco={{colorcode}}"{%- endif -%},{%- endfor -%}
                {% else %}{%- for p in range(1,12) %}"p[{{p}}].b[3].bco={{colorcode}}",{%- endfor -%}{%- endif -%}"delay=1"]

          - service: mqtt.publish # restore active page
            data_template:
              topic: "hasp/{{haspname}}/command/page"
              payload_template: '{{states("number." ~ haspname ~ "_active_page")|int}}'
          - service: mqtt.publish # request sensor update
            data:
              topic: "hasp/{{haspname}}/command"
              payload: ""

      #########################################################################
      # Handle MQTT message triggers
      - conditions:
          - condition: template
            value_template: '{{ trigger.platform == "mqtt" }}'
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == jsontopic }}"
                sequence:
                  - choose:
                      #########################################################################
                      # Page control buttons
                      - conditions: # catch p[x].b[1] and send the command to switch to the selected page
                          - condition: template
                            value_template: '{{ (trigger.payload_json.event | regex_match("p\[\d+\].b\[1\]")) and (trigger.payload_json.value == page_button_trigger) and not page_scroll}}'
                        sequence:
                          - service: mqtt.publish
                            data_template:
                              topic: "hasp/{{haspname}}/command/page"
                              payload: !input page1page
                              retain: true
                      - conditions: # catch p[x].b[1] and send the command to switch to the previous page if page_scroll == true
                          - condition: template
                            value_template: '{{ (trigger.payload_json.event | regex_match("p\[\d+\].b\[1\]")) and (trigger.payload_json.value == page_button_trigger) and page_scroll}}'
                        sequence:
                          - service: mqtt.publish
                            data_template:
                              topic: "hasp/{{haspname}}/command/page"
                              payload: "{{page_previous}}"
                              retain: true
                      - conditions: # catch p[x].b[2]
                          - condition: template
                            value_template: '{{ (trigger.payload_json.event | regex_match("p\[\d+\].b\[2\]")) and (trigger.payload_json.value == page_button_trigger) }}'
                        sequence:
                          - service: mqtt.publish
                            data_template:
                              topic: "hasp/{{haspname}}/command/page"
                              payload: !input page2page
                              retain: true
                      - conditions: # catch p[x].b[3] and send the command to switch to the selected page
                          - condition: template
                            value_template: '{{ (trigger.payload_json.event | regex_match("p\[\d+\].b\[3\]")) and (trigger.payload_json.value == page_button_trigger) and not page_scroll}}'
                        sequence:
                          - service: mqtt.publish
                            data_template:
                              topic: "hasp/{{haspname}}/command/page"
                              payload: !input page3page
                              retain: true
                      - conditions: # catch p[x].b[3] and send the command to switch to the next page if page_scroll == true
                          - condition: template
                            value_template: '{{ (trigger.payload_json.event | regex_match("p\[\d+\].b\[3\]")) and (trigger.payload_json.value == page_button_trigger) and page_scroll }}'
                        sequence:
                          - service: mqtt.publish
                            data_template:
                              topic: "hasp/{{haspname}}/command/page"
                              payload: "{{page_next}}"
                              retain: true

              #########################################################################
              # Apply selected theme colors to the page select buttons when theme colors are published
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == selectedforegroundcolortopic and not page_scroll }}"
                sequence:
                  - service: mqtt.publish
                    data_template:
                      topic: "{{jsoncommandtopic}}"
                      payload: >-
                        [{%- for p in range(1,12) %}{%- if p == page1page|int %}"p[{{p}}].b[1].pco={{trigger.payload}}"{%- else -%}"p[{{p}}].b[1].pco2={{trigger.payload}}"{%- endif -%},{%- endfor -%}"delay=1",
                        {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].pco={{trigger.payload}}"{%- else -%}"p[{{p}}].b[2].pco2={{trigger.payload}}"{%- endif -%},{%- endfor -%}"delay=1",
                        {%- for p in range(1,12) %}{%- if p == page3page|int %}"p[{{p}}].b[3].pco={{trigger.payload}}"{%- else -%}"p[{{p}}].b[3].pco2={{trigger.payload}}"{%- endif -%},{%- endfor -%}"delay=1"]
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == selectedforegroundcolortopic and page_scroll }}"
                sequence:
                  - service: mqtt.publish
                    data_template:
                      topic: "{{jsoncommandtopic}}"
                      payload: >-
                        [{%- for p in range(1,12) %}"p[{{p}}].b[1].pco2={{trigger.payload}}",{%- endfor -%}"delay=1",
                        {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].pco={{trigger.payload}}"{%- else -%}"p[{{p}}].b[2].pco2={{trigger.payload}}"{%- endif -%},{%- endfor -%}"delay=1",
                        {%- for p in range(1,12) %}"p[{{p}}].b[3].pco2={{trigger.payload}}",{%- endfor -%}"delay=1"]
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == selectedbackgroundcolortopic and not page_scroll }}"
                sequence:
                  - service: mqtt.publish
                    data_template:
                      topic: "{{jsoncommandtopic}}"
                      payload: >-
                        [{%- for p in range(1,12) %}{%- if p == page1page|int %}"p[{{p}}].b[1].bco={{trigger.payload}}"{%- else -%}"p[{{p}}].b[1].bco2={{trigger.payload}}"{%- endif -%},{%- endfor -%}"delay=1",
                        {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].bco={{trigger.payload}}"{%- else -%}"p[{{p}}].b[2].bco2={{trigger.payload}}"{%- endif -%},{%- endfor -%}"delay=1",
                        {%- for p in range(1,12) %}{%- if p == page3page|int %}"p[{{p}}].b[3].bco={{trigger.payload}}"{%- else -%}"p[{{p}}].b[3].bco2={{trigger.payload}}"{%- endif -%},{%- endfor -%}"delay=1"]
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == selectedbackgroundcolortopic and page_scroll }}"
                sequence:
                  - service: mqtt.publish
                    data_template:
                      topic: "{{jsoncommandtopic}}"
                      payload: >-
                        [{%- for p in range(1,12) %}"p[{{p}}].b[1].bco2={{trigger.payload}}",{%- endfor -%}"delay=1",
                        {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].bco={{trigger.payload}}"{%- else -%}"p[{{p}}].b[2].bco2={{trigger.payload}}"{%- endif -%},{%- endfor -%}"delay=1",
                        {%- for p in range(1,12) %}"p[{{p}}].b[3].bco2={{trigger.payload}}",{%- endfor -%}"delay=1"]
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == unselectedforegroundcolortopic and not page_scroll }}"
                sequence:
                  - service: mqtt.publish
                    data_template:
                      topic: "{{jsoncommandtopic}}"
                      payload: >-
                        [{%- for p in range(1,12) %}{%- if p == page1page|int %}"p[{{p}}].b[1].pco2={{trigger.payload}}"{%- else -%}"p[{{p}}].b[1].pco={{trigger.payload}}"{%- endif -%},{%- endfor -%}"delay=1",
                        {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].pco2={{trigger.payload}}"{%- else -%}"p[{{p}}].b[2].pco={{trigger.payload}}"{%- endif -%},{%- endfor -%}"delay=1",
                        {%- for p in range(1,12) %}{%- if p == page3page|int %}"p[{{p}}].b[3].pco2={{trigger.payload}}"{%- else -%}"p[{{p}}].b[3].pco={{trigger.payload}}"{%- endif -%},{%- endfor -%}"delay=1"]
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == unselectedforegroundcolortopic and page_scroll }}"
                sequence:
                  - service: mqtt.publish
                    data_template:
                      topic: "{{jsoncommandtopic}}"
                      payload: >-
                        [{%- for p in range(1,12) %}"p[{{p}}].b[1].pco={{trigger.payload}}",{%- endfor -%}"delay=1",
                        {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].pco2={{trigger.payload}}"{%- else -%}"p[{{p}}].b[2].pco={{trigger.payload}}"{%- endif -%},{%- endfor -%}"delay=1",
                        {%- for p in range(1,12) %}"p[{{p}}].b[3].pco={{trigger.payload}}",{%- endfor -%}"delay=1"]
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == unselectedbackgroundcolortopic and not page_scroll }}"
                sequence:
                  - service: mqtt.publish
                    data_template:
                      topic: "{{jsoncommandtopic}}"
                      payload: >-
                        [{%- for p in range(1,12) %}{%- if p == page1page|int %}"p[{{p}}].b[1].bco2={{trigger.payload}}"{%- else -%}"p[{{p}}].b[1].bco={{trigger.payload}}"{%- endif -%},{%- endfor -%}"delay=1",
                        {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].bco2={{trigger.payload}}"{%- else -%}"p[{{p}}].b[2].bco={{trigger.payload}}"{%- endif -%},{%- endfor -%}"delay=1",
                        {%- for p in range(1,12) %}{%- if p == page3page|int %}"p[{{p}}].b[3].bco2={{trigger.payload}}"{%- else -%}"p[{{p}}].b[3].bco={{trigger.payload}}"{%- endif -%},{%- endfor -%}"delay=1"]
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == unselectedbackgroundcolortopic and page_scroll }}"
                sequence:
                  - service: mqtt.publish
                    data_template:
                      topic: "{{jsoncommandtopic}}"
                      payload: >-
                        [{%- for p in range(1,12) %}"p[{{p}}].b[1].bco={{trigger.payload}}",{%- endfor -%}"delay=1",
                        {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].bco2={{trigger.payload}}"{%- else -%}"p[{{p}}].b[2].bco={{trigger.payload}}"{%- endif -%},{%- endfor -%}"delay=1",
                        {%- for p in range(1,12) %}"p[{{p}}].b[3].bco={{trigger.payload}}",{%- endfor -%}"delay=1"]
